import React, { useState, useCallback, memo, useMemo, useEffect } from 'react';
import './styles/QuestionBlock.css';

const QuestionBlock = memo(function QuestionBlock({ 
  title, 
  questions, 
  onQuestionSelected,
  level,
  blockedQuestions = [],
  additionalSlots = 0,
  removedQuestions = [],
  exchanges = [],
  resetTrigger = 0,
  studentChangeTrigger = 0 // –ù–æ–≤–∏–π –ø—Ä–æ–ø –¥–ª—è –∑–º—ñ–Ω–∏ —É—á–Ω—è
}) {
  const [selectedQuestions, setSelectedQuestions] = useState([]);
  const [animating, setAnimating] = useState(false);
  
  // –†–µ–∞–≥—É—î–º–æ –Ω–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å
  useEffect(() => {
    if (resetTrigger > 0) {
      setSelectedQuestions([]);
    }
  }, [resetTrigger]);
  
  // –†–µ–∞–≥—É—î–º–æ –Ω–∞ –∑–º—ñ–Ω—É —É—á–Ω—è - –∑–∞–≤–∂–¥–∏ –æ—á–∏—â—É—î–º–æ –∫–∞—Ä—Ç–æ—á–∫–∏
  useEffect(() => {
    if (studentChangeTrigger > 0) {
      setSelectedQuestions([]);
    }
  }, [studentChangeTrigger]);
  
  // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —É—á–Ω—è –∑ blockedQuestions
  useEffect(() => {
    // –ö–æ–ª–∏ –∑–º—ñ–Ω—é—é—Ç—å—Å—è blockedQuestions, —Ü–µ –æ–∑–Ω–∞—á–∞—î —â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –¥–∞–Ω—ñ –¥–ª—è —ñ–Ω—à–æ–≥–æ —É—á–Ω—è
    // –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ selectedQuestions –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ blockedQuestions
    if (blockedQuestions.length > 0) {
      const questionsFromThisLevel = blockedQuestions.filter(q => questions.includes(q));
      setSelectedQuestions(questionsFromThisLevel);
    }
  }, [blockedQuestions, questions]);
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ –æ–±–º—ñ–Ω –∑ —Ü—å–æ–≥–æ —Ä—ñ–≤–Ω—è
  const wasExchangedFrom = useMemo(() => {
    return exchanges.some(exchange => 
      exchange.fromLevel === level
    );
  }, [exchanges, level]);
  
  // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ, —Å–∫—ñ–ª—å–∫–∏ –ø–∏—Ç–∞–Ω—å –º–æ–∂–Ω–∞ —â–µ –æ–±—Ä–∞—Ç–∏
  const totalSlotsAvailable = 1 + additionalSlots;
  const questionsChosen = selectedQuestions.filter(q => !removedQuestions.includes(q)).length;
  const slotsRemaining = totalSlotsAvailable - questionsChosen;
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ –æ–±–∏—Ä–∞—Ç–∏ —â–µ –ø–∏—Ç–∞–Ω–Ω—è
  // –Ø–∫—â–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ –æ–±–º—ñ–Ω –∑ —Ü—å–æ–≥–æ —Ä—ñ–≤–Ω—è, –∫–Ω–æ–ø–∫–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ—é
  const canSelectMore = slotsRemaining > 0 && !wasExchangedFrom;

  const handleSelectQuestion = useCallback(() => {
    if (!canSelectMore || animating) return;
    
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫—ñ —â–µ –Ω–µ –±—É–ª–∏ –æ–±—Ä–∞–Ω—ñ –≥–ª–æ–±–∞–ª—å–Ω–æ
    const availableQuestions = questions.filter(q => !blockedQuestions.includes(q));
    
    if (availableQuestions.length === 0) {
      alert("–í—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ü—å–æ–≥–æ —Ä—ñ–≤–Ω—è –≤–∂–µ –±—É–ª–∏ –æ–±—Ä–∞–Ω—ñ!");
      return;
    }
    
    // –û–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è
    const randomIndex = Math.floor(Math.random() * availableQuestions.length);
    const question = availableQuestions[randomIndex];
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö
    setAnimating(true);
    setTimeout(() => {
      setAnimating(false);
      setSelectedQuestions(prev => [...prev, question]);
      
      // –ü–µ—Ä–µ–¥–∞—î–º–æ –æ–±—Ä–∞–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–≤–µ—Ä—Ö –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ä—ñ–≤–µ–Ω—å
      onQuestionSelected(question, level);
    }, 300);
  }, [canSelectMore, animating, questions, blockedQuestions, onQuestionSelected, level]);

  return (
    <div className={`question-block ${animating ? 'question-animating' : ''}`}>
      <h2>{title}</h2>
      
      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–ª–æ—Ç–∏ */}
      {additionalSlots > 0 && (
        <div className="additional-slots-info">
          <span className="bonus-icon">üéÅ</span>
          –î–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Å–ª–æ—Ç—ñ–≤: {additionalSlots}
        </div>
      )}
      
      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –æ–±–º—ñ–Ω—É */}
      {wasExchangedFrom && (
        <div className="exchange-blocked-info">
          <span className="warning-icon">‚ö†Ô∏è</span>
          –†—ñ–≤–µ–Ω—å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –ø—ñ—Å–ª—è –æ–±–º—ñ–Ω—É
        </div>
      )}
      
      {/* –ö–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É */}
      <button 
        onClick={handleSelectQuestion} 
        disabled={!canSelectMore || animating}
        className={!canSelectMore ? 'disabled' : ''}
      >
        {animating ? '–û–±–∏—Ä–∞—î–º–æ...' : 
         wasExchangedFrom ? '–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ (–æ–±–º—ñ–Ω—è–Ω–æ)' :
         slotsRemaining === 0 ? `–í—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –æ–±—Ä–∞–Ω—ñ (${questionsChosen}/${totalSlotsAvailable})` : 
         `–û–±—Ä–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è (${slotsRemaining} –∑–∞–ª–∏—à–∏–ª–æ—Å—å)`}
      </button>
      
      {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å */}
      <div className="selected-questions-container">
        {selectedQuestions.map((question, index) => (
          <div 
            key={index} 
            className={`selected-question ${removedQuestions.includes(question) ? 'removed' : ''}`}
          >
            <h3>–ü–∏—Ç–∞–Ω–Ω—è {index + 1}:</h3>
            <p>{question}</p>
            {removedQuestions.includes(question) && (
              <div className="removed-label">–û–±–º—ñ–Ω—è–Ω–æ</div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
});

export default QuestionBlock;